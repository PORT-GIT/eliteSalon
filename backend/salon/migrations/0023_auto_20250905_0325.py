# Generated by Django 5.2.3 on 2025-09-05 00:25

from django.db import migrations
from datetime import timedelta
import re

def parse_duration(duration_str):
    # this will convert the existing duration which is in string format to a timedelta object
    # this parser will handle my time data like 3hrs and 1hr 45mins
    if not duration_str:
        return timedelta()
    
    duration = timedelta()
    # this will find all groups of numbers (hr/hrs/hour/min/mins/minute)
    matches = re.findall(r'(\d+)\s*(hr|hrs|hour|minute|min|mins)', duration_str.lower())
    # this applies the use of regex formula to parse all kinds of time format with/without spacing
    for value, unit in matches:
        value = int(value)
        if unit in ['hr', 'hrs', 'hour']:
            duration += timedelta(hours=value)
        elif unit in ['minute', 'min', 'mins']:
            duration += timedelta(minutes=value)
    return duration



# this method will convert the old string time data to the new duration field data
# there seems to be an issue in why the time is not beinf converted properly due to an extra word or spacing or comma
# my string looks like (1hr 45mins) but the parser only accepts (1 hour 45 minutes) that is why I have added print statements to debug
def forward(apps, schema_editor):
    Service = apps.get_model('salon', 'service')
    for svc in Service.objects.all():
        if svc.durationOfService:
            # # convert the string duration to a timedelta object 
            # svc.new_durationOfService = parse_duration(svc.durationOfService)
            # svc.save(update_fields=['new_durationOfService'])
            print(f"Parsing: {svc.durationOfService}", flush=True)
            svc.new_durationOfService = parse_duration(svc.durationOfService)
            print(f"Result:{svc.new_durationOfService}")
            svc.save(update_fields=['new_durationOfService'])

# this does opposite of the forward method by turning the duration field back to string format(charfield)
def backward(apps, schema_edition):
    Service = apps.get_model('salon', 'service')
    for svc in Service.objects.all():
        # this will convert the timedelta object back to string format
        total_minutes = int(svc.new_durationOfService.total_seconds() // 60)
        hours, minutes = divmod(total_minutes, 60)
        parts = []
        if hours > 0:
            parts.append(f"{hours} hour{'s' if hours > 1 else ''}")
        
        if minutes > 0:
            parts.append(f"{minutes} minute{'s' if minutes > 1 else ''}")

        svc.durationOfService = " ".join(parts) if parts else "0 minutes"
        svc.save(update_fields=['durationOfService'])

class Migration(migrations.Migration):

    dependencies = [
        ('salon', '0022_service_new_durationofservice'),
    ]

    operations = [
        migrations.RunPython(forward, backward),
    ]
